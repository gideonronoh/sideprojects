/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Gadget } from "./Gadget";
import { GadgetCountArgs } from "./GadgetCountArgs";
import { GadgetFindManyArgs } from "./GadgetFindManyArgs";
import { GadgetFindUniqueArgs } from "./GadgetFindUniqueArgs";
import { CreateGadgetArgs } from "./CreateGadgetArgs";
import { UpdateGadgetArgs } from "./UpdateGadgetArgs";
import { DeleteGadgetArgs } from "./DeleteGadgetArgs";
import { InventoryFindManyArgs } from "../../inventory/base/InventoryFindManyArgs";
import { Inventory } from "../../inventory/base/Inventory";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { Category } from "../../category/base/Category";
import { GadgetService } from "../gadget.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Gadget)
export class GadgetResolverBase {
  constructor(
    protected readonly service: GadgetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Gadget",
    action: "read",
    possession: "any",
  })
  async _gadgetsMeta(
    @graphql.Args() args: GadgetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Gadget])
  @nestAccessControl.UseRoles({
    resource: "Gadget",
    action: "read",
    possession: "any",
  })
  async gadgets(@graphql.Args() args: GadgetFindManyArgs): Promise<Gadget[]> {
    return this.service.gadgets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Gadget, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Gadget",
    action: "read",
    possession: "own",
  })
  async gadget(
    @graphql.Args() args: GadgetFindUniqueArgs
  ): Promise<Gadget | null> {
    const result = await this.service.gadget(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Gadget)
  @nestAccessControl.UseRoles({
    resource: "Gadget",
    action: "create",
    possession: "any",
  })
  async createGadget(@graphql.Args() args: CreateGadgetArgs): Promise<Gadget> {
    return await this.service.createGadget({
      ...args,
      data: {
        ...args.data,

        category: args.data.category
          ? {
              connect: args.data.category,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Gadget)
  @nestAccessControl.UseRoles({
    resource: "Gadget",
    action: "update",
    possession: "any",
  })
  async updateGadget(
    @graphql.Args() args: UpdateGadgetArgs
  ): Promise<Gadget | null> {
    try {
      return await this.service.updateGadget({
        ...args,
        data: {
          ...args.data,

          category: args.data.category
            ? {
                connect: args.data.category,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gadget)
  @nestAccessControl.UseRoles({
    resource: "Gadget",
    action: "delete",
    possession: "any",
  })
  async deleteGadget(
    @graphql.Args() args: DeleteGadgetArgs
  ): Promise<Gadget | null> {
    try {
      return await this.service.deleteGadget(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Inventory], { name: "inventories" })
  @nestAccessControl.UseRoles({
    resource: "Inventory",
    action: "read",
    possession: "any",
  })
  async findInventories(
    @graphql.Parent() parent: Gadget,
    @graphql.Args() args: InventoryFindManyArgs
  ): Promise<Inventory[]> {
    const results = await this.service.findInventories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order], { name: "orders" })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async findOrders(
    @graphql.Parent() parent: Gadget,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, {
    nullable: true,
    name: "category",
  })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async getCategory(
    @graphql.Parent() parent: Gadget
  ): Promise<Category | null> {
    const result = await this.service.getCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
