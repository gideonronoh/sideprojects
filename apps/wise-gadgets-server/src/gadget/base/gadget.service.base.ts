/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Gadget as PrismaGadget,
  Inventory as PrismaInventory,
  Order as PrismaOrder,
  Category as PrismaCategory,
} from "@prisma/client";

export class GadgetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GadgetCountArgs, "select">): Promise<number> {
    return this.prisma.gadget.count(args);
  }

  async gadgets(args: Prisma.GadgetFindManyArgs): Promise<PrismaGadget[]> {
    return this.prisma.gadget.findMany(args);
  }
  async gadget(
    args: Prisma.GadgetFindUniqueArgs
  ): Promise<PrismaGadget | null> {
    return this.prisma.gadget.findUnique(args);
  }
  async createGadget(args: Prisma.GadgetCreateArgs): Promise<PrismaGadget> {
    return this.prisma.gadget.create(args);
  }
  async updateGadget(args: Prisma.GadgetUpdateArgs): Promise<PrismaGadget> {
    return this.prisma.gadget.update(args);
  }
  async deleteGadget(args: Prisma.GadgetDeleteArgs): Promise<PrismaGadget> {
    return this.prisma.gadget.delete(args);
  }

  async findInventories(
    parentId: string,
    args: Prisma.InventoryFindManyArgs
  ): Promise<PrismaInventory[]> {
    return this.prisma.gadget
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inventories(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<PrismaOrder[]> {
    return this.prisma.gadget
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orders(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.gadget
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }
}
